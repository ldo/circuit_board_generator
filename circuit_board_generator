#!/usr/bin/python3
#+
# Generate random patterns that look like printed-circuit
# board traces. Based on the JavaScript code found at
# <https://codepen.io/tsuhre/details/xgmEPe>. Invoke this
# script as follows:
#
#     circuit_board_generator «options» [«outfile»]
#
# where «outfile» is the name of the PNG file under which
# to save the output. If this is not specified, then the
# image is displayed on-screen. Valid «options» are:
#
#     --cell=«cell_size»
#         the dimensions of each cell of the pattern, in integer
#         points. If omitted, defaults to 30.
#     --margin=«x»[:«y»]
#         the dimensions of the margin to leave around the pattern.
#         If omitted, defaults to 0:0.
#     --mask
#         indicates that the image is to be used as an alpha mask,
#         rather than as a picture in itself. Everything other than
#         the wire traces becomes transparent.
#     --min-wire=«n»
#         the minimum length in cell steps of wires that make up the
#         pattern. If omitted, defaults to 2.
#     --pattern=«x»[:«y»]
#         the dimensions, in cell units of the pattern to generate.
#         If omitted, defaults to 20:20.
#     --seed=«starting-seed»
#         the starting integer value for the pseudorandom number
#         generator. Specifying the same seed with the same parameters
#         will produce the same pattern. If omitted, a random seed is
#         chosen, to produce a different pattern each time.
#     --straight=«bias»
#         a positive integer bias that controls how straight the
#         generated wires tend to be. If omitted, the default is 5.
#     --tile|--tile-x|--tile-y
#         specifies that wires can cross the edges of the pattern
#         so they join up when the pattern is used to tile a plane.
#         --tile-x allows crossing in the x-direction, --tile-y in
#         the y-direction, and --tile in both directions.
#     --wire=«max-length»
#         the maximum length of generated wires. Their actual lengths
#         may be less, depending on the space available around
#         previously-generated wires. If omitted, the default is 20.
#
# External library needed: Qahirah <https://gitlab.com/ldo/qahirah>,
# <https://github.com/ldo/qahirah>.
#
# External program needed: ImageMagick for on-screen display.
#-

import sys
import os
import math
import random
import subprocess
import getopt
import qahirah as qah
from qahirah import \
    CAIRO, \
    Colour, \
    Vector

#+
# Useful stuff
#-

def pos_int(s : str) :
    "parses s as an integer, which must be positive."
    i = int(s)
    if i <= 0 :
        raise ValueError("must be positive integer: %s" % repr(s))
    #end if
    return \
        i
#end pos_int

def vector_str(s : str, conv) :
    "parses s as one or two values «x» or «x»:«y», using conv" \
    " to parse «x» and «y». Returns the result as Vector(«x», «x»)" \
    " or Vector(«x», «y») respectively."
    if ":" in s :
        result = Vector(*tuple(conv(v) for v in s.split(":", 1)))
    else :
        result = Vector(1, 1) * conv(s)
    #end if
    return \
        result
#end vector_str

#+
# Generating the circuit board
#-

cell_size = 30
  # governs scale of rendering of pattern
pattern_size = Vector(20, 20) # in units of cells
margin = Vector(0, 0)
wire_length = 20
  # try to generate each wire up to this length
min_wire_length = 2
  # don’t show wires shorter than this
straightness = 5
  # bias for maintaining wire direction
tiling = Vector(False, False)
dpi = qah.base_dpi
colours_image = \
    {
        "background" : Colour.from_hsva((1 / 3, 0.7, 0.3)),
        "pad" : Colour.grey(0),
        "trace" : Colour.from_hsva((1 / 8, 0.6, 0.6)),
    }
colours_mask = \
    {
        "background" : Colour.grey(0, 0),
        "pad" : Colour.grey(0, 0),
        "trace" : Colour.grey(0, 1),
    }

directions = tuple \
  (
    Vector(*v)
    for v in
        [
            (-1, -1), (0, -1), (1, -1),
            (1, 0),
            (1, 1), (0, 1), (-1, 1),
            (-1, 0),
        ]
          # all the different one-step directions from the
          # current cell, arranged in a circle.
  )

class Cell :

    def __init__(self, pos : Vector) :
        self.pos = pos
        self.available = True
        self.owner = None # owning Wire
    #end __init__

#end Cell

def normalize(pos) :
    "returns pos adjusted for wraparound along permitted axes."
    pos = Vector(*tuple(pos)) # ensure I get a new Vector instance
    if tiling.x :
        pos.x %= pattern_size.x
    #end if
    if tiling.y :
        pos.y %= pattern_size.y
    #end if
    return \
        pos
#end normalize

class Grid :

    def __init__(self) :
        self.cells = list \
          (
            Cell(Vector(j, i))
            for i in range(pattern_size.y)
            for j in range(pattern_size.x)
          )
    #end __init__

    def __getitem__(self, index : Vector) :
        index = normalize(index)
        assert valid_grid_pos(index)
        j, i = index
        return \
            self.cells[i * pattern_size.x + j]
    #end __getitem__

#end Grid

def valid_grid_pos(pos : Vector) :
    "is pos the coordinates of a valid position within the grid."
    return \
        (
            pos.isint()
        and
            (tiling.x or pos.x >= 0 and pos.x < pattern_size.x)
        and
            (tiling.y or pos.y >= 0 and pos.y < pattern_size.y)
        )
#end valid_grid_pos

def find_open_direction(pos : Vector) :
    "finds a random free direction that the wire can start from."
    check_directions = list(range(8))
    random.shuffle(check_directions)
    while True :
        if len(check_directions) == 0 :
            result = 0
              # doesn’t matter what this is, if wire
              # cannot be extended in any direction
            break
        #end if
        index = check_directions.pop()
        new_pos = pos + directions[index]
        if valid_grid_pos(new_pos) and grid[new_pos].available :
            result = index
            break
        #end if
    #end while
    return \
        result
#end find_open_direction

def no_crossover(dirindex, pos : Vector) :
    "stops diagonal wires from crossing."
    if dirindex % 2 == 0 :
        # diagonal step
        adj = directions[dirindex]
        diag1 = grid[pos.x - adj.x, pos.y]
        diag2 = grid[pos.x, pos.y - adj.y]
        result = diag1.available or diag2.available or diag1.owner != diag2.owner
    else :
        result = True
    #end if
    return \
        result
#end no_crossover

class Wire :

    def __init__(self, start : Cell) :
        start.owner = self
        self.cells = [start]
        start.available = False
        self.last_direction = find_open_direction(start.pos)
    #end __init__

    def __len__(self) :
        "the length of the wire, in cells."
        return \
            len(self.cells)
    #end __len__

    def render(self, ctx : qah.Context) :
        "draws the Wire into a graphics context."
        ctx.save()
        # For a tiled pattern, work out how many repeats of
        # this wire render are necessary, suitably offset
        # by whole multiples of the pattern dimensions, to
        # ensure all parts appear in the tile.
        min_pos = Vector \
          (
            min(cell.pos.x for cell in self.cells),
            min(cell.pos.y for cell in self.cells)
          )
        max_pos = Vector \
          (
            max(cell.pos.x for cell in self.cells),
            max(cell.pos.y for cell in self.cells)
          )
        min_step = math.floor(min_pos / pattern_size)
        max_step = math.floor(max_pos / pattern_size)
        for y_step in range(min_step.y, max_step.y + 1) :
            for x_step in range(min_step.x, max_step.x + 1) :
                offset = - Vector(x_step, y_step) * pattern_size
                ctx.line_width = cell_size / 4
                ctx.source_colour = colours["trace"]
                ctx.new_path()
                for cell in self.cells :
                    ctx.line_to((cell.pos + offset) * cell_size)
                #end for
                ctx.stroke()
                ctx.line_width = cell_size / 6
                for cell in (self.cells[0], self.cells[-1]) :
                    ctx.new_path()
                    ctx.source_colour = colours["trace"]
                    ctx.circle((cell.pos + offset) * cell_size, cell_size * 0.35)
                    ctx.fill()
                    ctx.circle((cell.pos + offset) * cell_size, cell_size * 0.21)
                    ctx.source_colour = colours["pad"]
                    ctx.fill()
                #end for
            #end for
        #end for
        ctx.restore()
    #end render

    def generate(self) :
        "actually generates the rest of the wire."
        while True :
            # try extending the wire by another cell, if I can
            if len(self.cells) == wire_length :
                break
            prev_cell = self.cells[-1]
            tries = random.choice(([0, 1, -1], [0, -1, 1]))
              # either continue on straight (according to straightness bias),
              # or turn ±45° (with equal probability)
            has_space = False
            while True :
                # try another direction from tries, if there are any left
                if len(tries) == 0 :
                    break
                mod = tries.pop(math.floor(random.random() ** straightness * len(tries)))
                index = (self.last_direction + mod) % 8
                direction = directions[index]
                pos = prev_cell.pos + direction
                if valid_grid_pos(pos) :
                    cell = grid[pos]
                    if cell.available and no_crossover(index, pos) :
                        if tiling.x or tiling.y :
                            cell.pos = pos
                        #end if
                        cell.owner = self
                        self.cells.append(cell)
                        cell.available = False
                        has_space = True
                        self.last_direction = index
                        break
                    #end if
                #end if
            #end while
            if not has_space :
                break
        #end while
    #end generate

#end Wire

#+
# Mainline
#-

colours = colours_image
ranseed = None
outfilename = None
is_mask = False
opts, args = getopt.getopt \
  (
    sys.argv[1:],
    "",
    [
        "cell=", "margin=", "mask", "min-wire=", "pattern=", "seed=",
        "straight=", "tile", "tile-x", "tile-y", "wire="
    ]
  )
for keyword, value in opts :
    if keyword == "--cell" :
        cell_size = pos_int(value)
    elif keyword == "--min-wire" :
        min_wire_length = pos_int(value)
    elif keyword == "--margin" :
        margin = vector_str(value, float)
    elif keyword == "--mask" :
        is_mask = True
        colours = colours_mask
    elif keyword == "--pattern" :
        pattern_size = vector_str(value, pos_int)
    elif keyword == "--seed" :
        ranseed = int(value)
    elif keyword == "--straight" :
        straightness = pos_int(value)
    elif keyword == "--tile" :
        tiling.x = True
        tiling.y = True
    elif keyword == "--tile-x" :
        tiling.x = True
    elif keyword == "--tile-y" :
        tiling.y = True
    elif keyword == "--wire" :
        wire_length = pos_int(value)
    #end if
#end for
if len(args) != 0 :
    if len(args) == 1 :
        outfilename = args[0]
    else :
        raise getopt.GetoptError("no more than 1 arg (outfilename) expected")
    #end if
#end if

if ranseed != None :
    random.seed(ranseed)
#end if

grid = Grid()
wires = []
positions_avail = list \
  (
    grid[j, i].pos
    for j in range(pattern_size.x)
    for i in range(pattern_size.y)
  )
while len(positions_avail) != 0 :
    pos = random.choice(positions_avail)
    cell = grid[pos]
    wire = Wire(cell)
    wire.generate()
    wires.append(wire)
    for cell in wire.cells :
        positions_avail.remove(normalize(cell.pos))
    #end for
#end while

pix = qah.ImageSurface.create \
  (
    format = (CAIRO.FORMAT_RGB24, CAIRO.FORMAT_ARGB32)[is_mask],
    dimensions = round((pattern_size * cell_size + 2 * margin) * dpi / qah.base_dpi)
  )
ctx = \
    (qah.Context.create(pix)
        .scale(dpi / qah.base_dpi)
        .translate(Vector(1, 1) * cell_size / 2)
        .translate(margin)
    )
ctx.source_colour = colours["background"]
ctx.operator = CAIRO.OPERATOR_SOURCE # needed for mask
ctx.paint()
for wire in wires :
    if len(wire) >= min_wire_length :
        wire.render(ctx)
    #end if
#end for

pix.flush()
if outfilename != None :
    if os.path.isfile(outfilename) :
        raise RuntimeError("already exists: %s" % repr(outfilename))
    #end if
    pix.write_to_png(outfilename)
else :
    proc_display = subprocess.Popen \
      (
        args = ("display", "/dev/stdin"),
        stdin = subprocess.PIPE
      )
    pix.write_to_png_file(proc_display.stdin)
    proc_display.stdin.close()
    proc_display.wait()
#end if
